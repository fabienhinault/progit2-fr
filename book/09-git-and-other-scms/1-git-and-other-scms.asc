==Git et les autres systèmes

Le monde n'est pas parfait.
Habituellement, vous ne pouvez pas basculer immédiatement sous Git tous les projets que vous pourriez rencontrer.
Quelques fois, vous êtes bloqué sur un projet utilisant un autre VCS et vous souhaiteriez avoir Git.
Dans la première partie de ce chapitre, nous traiterons des moyens d'utiliser Git en tant que client quand vous travaillez sur un projet hébergé sur un autre système.

À un moment, il se peut que vous veuillez convertir votre projet à Git.
La seconde partie de ce chapitre traite de la migration de votre projet vers Git depuis certains systèmes, ainsi que de la méthode à suivre s'il n'existe aucun outil d'import.

=== Git as a Client

(((Git as a client)))
Git provides such a nice experience for developers that many people have figured out how to use it on their workstation, even if the rest of their team is using an entirely different VCS.
There are a number of these adapters, called ``bridges,'' available.
Here we'll cover the ones you're most likely to run into in the wild.

include::sections/client-svn.asc[]

include::sections/client-hg.asc[]

include::sections/client-p4.asc[]

include::sections/client-tfs.asc[]

[[_migrating]]
=== Migrating to Git

(((Migrating to Git)))
If you have an existing codebase in another VCS but you've decided to start using Git, you must migrate your project one way or another.
This section goes over some importers for common systems, and then demonstrates how to develop your own custom importer.
You'll learn how to import data from several of the bigger professionally used SCM systems, because they make up the majority of users who are switching, and because high-quality tools for them are easy to come by.

include::sections/import-svn.asc[]

include::sections/import-hg.asc[]

include::sections/import-p4.asc[]

include::sections/import-tfs.asc[]

include::sections/import-custom.asc[]

=== Summary

You should feel comfortable using Git as a client for other version-control systems, or importing nearly any existing repository into Git without losing data.
In the next chapter, we'll cover the raw internals of Git so you can craft every single byte, if need be.
